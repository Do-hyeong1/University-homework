선형대수 k-means clustering 알고리즘
5-vector, k groups.
1) file name is kmeansClustering.py
2)외부 파일을 받아 실행(inputfile.txt)
=> first input
that contains 5-vectors such as
       1  3  2  1  2
       3  6  1  3  10
       8  1  1  8  25
       ...
second input => value of k (the number of groups)

last input =>maximum number of iterations

e.g.  $python kmeansClustering.py inputfile.txt [value of k] [# of iteration]

   4. Output of the program
      a) The representative of each cluster
      b) The number of vectors belonging to each cluster
      e.g., for the case of then 5-vectors of [(0, 0, 0, 0, i) for i in range(1, 11)] and k=2
           # of actual iteration: 2
           cluster 1: representative = (0, 0, 0, 0, 3), # of vectors = 5
           cluster 2: representative = (0, 0, 0, 0, 8), # of vectors = 5




                                               
### 코드 설명
1. **입력 파일 읽기 (`read_input_file`)**
    - 입력 파일에서 벡터 데이터를 읽고 각 줄을 `[1, 3, 2, 1, 2]`와 같은 리스트로 변환하여 반환합니다.

2. **초기 중심점 선택 (`initialize_centroids`)**
    - 입력 벡터 중 `k`개의 벡터를 랜덤으로 선택하여 초기 중심점으로 설정합니다.

3. **유클리드 거리 계산 (`calculate_distance`)**
    - 벡터 간의 유클리드 거리(공식에 따라 각 차원의 거리 제곱 합의 제곱근) 계산.

4. **클러스터 할당 (`assign_clusters`)**
    - 각 벡터를 모든 중심점과의 거리 계산 후 가장 가까운 클러스터에 배정.

5. **중심점 업데이트 (`update_centroids`)**
    - 각 클러스터에 할당된 벡터들 평균을 새 중심점으로 설정.

6. **반복 수행 및 종료 조건**
    - 최대 `max_iterations` 동안 클러스터링 반복. 클러스터 중심이 변하지 않으면 조기 종료.

7. **파일 실행 및 결과 출력**
    - 커맨드라인 인자는 `filename`, `k`, `# of iterations`의 순서로 전달.
    - 결과로 각 클러스터의 대표 값(중심점)과 클러스터당 벡터 개수 출력.

### 실행 방법
- 터미널에서 다음 명령으로 실행:
``` bash
  python kmeansClustering.py inputfile.txt 2 100
```
- `inputfile.txt`는 5-벡터 데이터를 저장한 파일.
- `2`는 `k` 값 (클러스터 개수).
- `100`은 최대 반복 횟수입니다.

### 예제 출력
다음과 같이 출력됩니다:
``` 
# of actual iterations: 3
Cluster 1: representative = [1.0, 3.0, 2.0, 1.0, 4.0], # of vectors = 5
Cluster 2: representative = [8.0, 1.0, 1.0, 8.0, 25.0], # of vectors = 5
```
이 코드는 간단한 K-means 알고리즘을 구현하기 위해 작성되었으며 가독성과 유지 보수가 용이하도록 구성하였습니다.

                                               
